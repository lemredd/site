---
interface Props {
	viewport: "mobile"|"desktop"
}

const { viewport = "mobile" } = Astro.props;
---

<script>
const dark_mode_btn = document.querySelector("#dark-mode-toggler") as  HTMLInputElement;
const { "documentElement": root } = document;

const PREFERRED_COLOR_SCHEME_KEY = "preferred_color_scheme";
let preferred_color_scheme = localStorage.getItem(PREFERRED_COLOR_SCHEME_KEY);

if (!preferred_color_scheme) {
	localStorage.setItem(PREFERRED_COLOR_SCHEME_KEY, "light");
	preferred_color_scheme = localStorage.getItem(PREFERRED_COLOR_SCHEME_KEY);
} else if (preferred_color_scheme === "dark") {
	dark_mode_btn.checked = true;
	root.classList.add("dark");
}

dark_mode_btn.addEventListener("change", (event: Event) => {
	const { checked } = event.target as HTMLInputElement;
	if (checked) localStorage.setItem(PREFERRED_COLOR_SCHEME_KEY, "dark");
	else localStorage.setItem(PREFERRED_COLOR_SCHEME_KEY, "light");

	root.classList.toggle("dark");
});
</script>

<input type="checkbox" id={`dark-mode-toggler-${viewport}`} class="dark-mode-toggler" hidden>
<label for={`dark-mode-toggler-${viewport}`} tabindex="0" class="dark-mode-toggler-icon">
	<div class="icon on i-material-symbols:toggle-on" />
	<div class="icon off i-material-symbols:toggle-off" />
</label>

<style lang="scss">
#dark-mode-toggler {
	z-index: 1000;
}

.dark-mode-toggler-icon {
	@apply inline-flex;
	background-color: transparent !important;
}

.icon {
	@apply text-[1.75rem];
	&.on {
		display: none;
	}
}

#dark-mode-toggler:checked + .dark-mode-toggler-icon {
	.icon.on {
		display: inline-block;
	}

	.icon.off {
		display: none;
	}
}
</style>
